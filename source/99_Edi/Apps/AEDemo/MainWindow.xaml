<Window
    x:Class="AEDemo.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:aeditCmd="clr-namespace:ICSharpCode.AvalonEdit;assembly=ICSharpCode.AvalonEdit"
    xmlns:behav="clr-namespace:AEDemo.Behaviors"
    xmlns:conv="clr-namespace:AEDemo.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:editCmd="clr-namespace:TextEditLib;assembly=TextEditLib"
    xmlns:enums="clr-namespace:TextEditLib.Enums;assembly=TextEditLib"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Title="MainWindow"
    Width="525"
    Height="350"
    mc:Ignorable="d">
    <Grid>
        <Grid.Resources>
            <conv:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
            <conv:BoolToStringPropConverter
                x:Key="OverStrikeModeConverter"
                FalseValue="Insert"
                TrueValue="Overwrite" />
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <StackPanel
            Grid.Row="0"
            Margin="3"
            Orientation="Horizontal">

            <Button
                Margin="3"
                HorizontalAlignment="Left"
                VerticalAlignment="Stretch"
                Command="{Binding OpenFileCommand}">
                <Image
                    Height="32"
                    SnapsToDevicePixels="True"
                    Source="{DynamicResource Image_OpenFile}" />
            </Button>

            <ToolBarTray
                Grid.Row="1"
                VerticalAlignment="Center"
                SnapsToDevicePixels="True"
                ToolTip="Copy">
                <ToolBar
                    VerticalAlignment="Stretch"
                    SnapsToDevicePixels="True"
                    ToolBarTray.IsLocked="True">

                    <!--
                        The bindings for Cut, Copy, Paste, Delete, Undo, Redo below work only in a Menu or Toolbar
                        They can be implemented via seperate class eg.: 'ApplicationCommands.Cut'
                        but you will have to create that class to use the bindings somewhere else
                        https://stackoverflow.com/questions/7563666/copy-and-paste-commands-with-wpf-buttons
                    -->
                    <Button
                        Margin="3,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Command="Copy"
                        SnapsToDevicePixels="True"
                        ToolTip="Copy">
                        <Image
                            Height="32"
                            SnapsToDevicePixels="True"
                            Source="{DynamicResource Image_Copy}" />
                    </Button>
                    <Button
                        Margin="3,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Command="Cut"
                        SnapsToDevicePixels="True"
                        ToolTip="Cut">
                        <Image
                            Height="32"
                            SnapsToDevicePixels="True"
                            Source="{DynamicResource Image_Cut}" />
                    </Button>
                    <Button
                        Margin="3,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Command="Paste"
                        SnapsToDevicePixels="True"
                        ToolTip="Paste">
                        <Image
                            Height="32"
                            SnapsToDevicePixels="True"
                            Source="{DynamicResource Image_Paste}" />
                    </Button>
                    <Button
                        Margin="3,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Command="Delete"
                        SnapsToDevicePixels="True"
                        ToolTip="Delete">
                        <Image
                            Height="32"
                            SnapsToDevicePixels="True"
                            Source="{DynamicResource Image_Delete}" />
                    </Button>
                    <Separator Margin="3" />

                    <Button
                        Margin="3,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Command="Undo"
                        SnapsToDevicePixels="True"
                        ToolTip="Undo">
                        <Image
                            Height="32"
                            SnapsToDevicePixels="True"
                            Source="{DynamicResource Image_Undo}" />
                    </Button>
                    <Button
                        Margin="3,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Command="Redo"
                        SnapsToDevicePixels="True"
                        ToolTip="Redo">
                        <Image
                            Height="32"
                            SnapsToDevicePixels="True"
                            Source="{DynamicResource Image_Redo}" />
                    </Button>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding DocumentRoot.IsContentLoaded, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter}}">

                        <Separator Margin="9,0" />

                        <ToggleButton
                            Command="{Binding DocumentRoot.ToggleEditorOptionCommand}"
                            CommandParameter="{x:Static enums:ToggleEditorOption.WordWrap}"
                            FocusVisualStyle="{x:Null}"
                            IsChecked="{Binding DocumentRoot.WordWrap, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            ToolTip="Toggle word wrap option"
                            ToolTipService.ShowOnDisabled="True">
                            <Image Height="32" Source="{DynamicResource Image_WordWrap}" />
                        </ToggleButton>

                        <ToggleButton
                            Command="{Binding DocumentRoot.ToggleEditorOptionCommand}"
                            CommandParameter="{x:Static enums:ToggleEditorOption.ShowLineNumber}"
                            FocusVisualStyle="{x:Null}"
                            IsChecked="{Binding DocumentRoot.ShowLineNumbers, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            ToolTip="Toggle show line numbers option"
                            ToolTipService.ShowOnDisabled="True">
                            <Image Height="32" Source="{DynamicResource Image_ShowLineNumbers}" />
                        </ToggleButton>
                        <ToggleButton
                            Command="{Binding DocumentRoot.ToggleEditorOptionCommand}"
                            CommandParameter="{x:Static enums:ToggleEditorOption.ShowEndOfLine}"
                            FocusVisualStyle="{x:Null}"
                            IsChecked="{Binding DocumentRoot.ShowEndOfLine, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            ToolTip="Toggle show end of line option}"
                            ToolTipService.ShowOnDisabled="True">
                            <Image Height="32" Source="{DynamicResource Image_EndOfLine}" />
                        </ToggleButton>

                        <ToggleButton
                            Command="{Binding DocumentRoot.ToggleEditorOptionCommand}"
                            CommandParameter="{x:Static enums:ToggleEditorOption.ShowSpaces}"
                            FocusVisualStyle="{x:Null}"
                            IsChecked="{Binding DocumentRoot.ShowSpaces, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            ToolTip="Toggle show spaces option"
                            ToolTipService.ShowOnDisabled="True">
                            <Image Height="32" Source="{DynamicResource Image_Space}" />
                        </ToggleButton>
                        <ToggleButton
                            Command="{Binding DocumentRoot.ToggleEditorOptionCommand}"
                            CommandParameter="{x:Static enums:ToggleEditorOption.ShowTabs}"
                            FocusVisualStyle="{x:Null}"
                            IsChecked="{Binding DocumentRoot.ShowTabs, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            ToolTip="Toggle show tabs option"
                            ToolTipService.ShowOnDisabled="True">
                            <Image Height="32" Source="{DynamicResource Image_Tabs}" />
                        </ToggleButton>

                        <Separator Margin="9,0" />
                        <Button
                            Margin="3,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Command="{Binding DocumentRoot.DisableHighlightingCommand}"
                            SnapsToDevicePixels="True"
                            ToolTip="Disable Syntax Highlighting">
                            <Image
                                Height="32"
                                SnapsToDevicePixels="True"
                                Source="{DynamicResource HighlightingOnOff}" />
                        </Button>

                        <ComboBox
                            Grid.Column="1"
                            MinWidth="50"
                            Margin="0,0,3,3"
                            VerticalAlignment="Center"
                            behav:SelectionChangedCommand.ChangedCommand="{Binding DocumentRoot.HighlightingChangeCommand}"
                            DisplayMemberPath="Name"
                            ItemsSource="{Binding DocumentRoot.HighlightingDefinitions, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            SelectedItem="{Binding DocumentRoot.HighlightingDefinition, UpdateSourceTrigger=PropertyChanged}" />
                    </StackPanel>
                </ToolBar>
            </ToolBarTray>


        </StackPanel>

        <Grid
            xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
            Grid.Row="1"
            Grid.Column="0"
            Grid.ColumnSpan="2"
            Margin="3">
            <Grid.Resources>
                <!--
                    This resource is necessary to make sure that AvalonEdit always has valid options
                    (there should always be an options object bound to the editor control even when there is no document)
                -->
                <avalonEdit:TextEditorOptions x:Key="TextEditOptions" />
            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <Grid xmlns:avEditEx="clr-namespace:TextEditLib;assembly=TextEditLib" Grid.Row="0">
                <avEditEx:TextEdit
                    Name="avEdit"
                    Column="{Binding SynchronizedColumn, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                    DataContext="{Binding DocumentRoot}"
                    Document="{Binding Document, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                    FontFamily="Consola"
                    FontSize="{Binding Path=SizeUnitLabel.ScreenPoints, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    IsModified="{Binding Path=IsDirty, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    IsReadOnly="{Binding IsReadOnly, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                    Line="{Binding SynchronizedLine, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                    Options="{Binding TextOptions, FallbackValue={StaticResource TextEditOptions}}"
                    ShowLineNumbers="{Binding ShowLineNumbers}"
                    SyntaxHighlighting="{Binding HighlightingDefinition, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                    WordWrap="{Binding WordWrap}">
                    <avalonEdit:TextEditor.ContextMenu>
                        <ContextMenu>
                            <MenuItem Command="Cut" Header="Cut">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        SnapsToDevicePixels="True"
                                        Source="{DynamicResource Image_Cut}" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Command="Copy" Header="Copy">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        SnapsToDevicePixels="True"
                                        Source="{DynamicResource Image_Copy}" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Command="Paste" Header="Paste">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        SnapsToDevicePixels="True"
                                        Source="{DynamicResource Image_Paste}" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Command="Delete" Header="Delete">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        SnapsToDevicePixels="True"
                                        Source="{DynamicResource Image_Delete}" />
                                </MenuItem.Icon>
                            </MenuItem>

                            <Separator />

                            <MenuItem Command="Undo" Header="Undo">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        SnapsToDevicePixels="True"
                                        Source="{DynamicResource Image_Undo}" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Command="Redo" Header="Redo">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        SnapsToDevicePixels="True"
                                        Source="{DynamicResource Image_Redo}" />
                                </MenuItem.Icon>
                            </MenuItem>

                            <Separator />
                            <MenuItem
                                Command="{x:Static aeditCmd:AvalonEditCommands.DeleteLine}"
                                Header="Delete Line"
                                ToolTip="Delete the current text line" />

                            <MenuItem Header="White Spaces">
                                <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.RemoveLeadingWhitespace}"
                                          Header="Remove Leading White Spaces" />

                                <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.RemoveTrailingWhitespace}"
                                          Header="Remove Trailing White Spaces" />

                                <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertTabsToSpaces}"
                                          Header="Convert Tabs To Spaces" />

                                <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertSpacesToTabs}"
                                          Header="Convert Spaces To Tabs" />

                                <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertLeadingTabsToSpaces}"
                                          Header="Convert Leading Tabs To Spaces" />

                                <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertLeadingSpacesToTabs}"
                                          Header="Convert Leading Spaces To Tabs" />
                            </MenuItem>

                            <MenuItem Header="Text Case">
                                <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertToUppercase}"
                                          Header="Convert Text To Upper Case" />

                                <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertToLowercase}"
                                          Header="Convert Text To Lower Case" />

                                <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertToTitleCase}"
                                          Header="Convert Text To Title Case" />

                                <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.InvertCase}"
                                          Header="Invert Text Case" />
                            </MenuItem>

                            <!--
                                MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.IndentSelection}"
                                Header="Apply Text Indentation Strategy" /
                            -->

                            <MenuItem Command="{x:Static editCmd:TextEditCommands.FoldsCollapseAll}"
                                      Header="Collapse Text Foldings" />

                            <MenuItem Command="{x:Static editCmd:TextEditCommands.FoldsExpandAll}"
                                      Header="Expand Text Foldings" />

                        </ContextMenu>
                    </avalonEdit:TextEditor.ContextMenu>
                </avEditEx:TextEdit>
            </Grid>
        </Grid>

        <StatusBar Grid.Row="2">
            <StatusBarItem
                Margin="0,0,21,0"
                HorizontalAlignment="Right"
                Visibility="{Binding DocumentRoot.IsContentLoaded, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <TextBlock
                        Grid.Column="0"
                        Margin="3,0,3,0"
                        Text="Ln:"
                        ToolTip="Current Line">
                        <TextBlock Text="{Binding DocumentRoot.SynchronizedLine, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                    </TextBlock>
                    <TextBlock
                        Grid.Column="1"
                        Margin="0,0,3,0"
                        Text=", Col:"
                        ToolTip="Current Column">
                        <TextBlock Text="{Binding DocumentRoot.SynchronizedColumn, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                    </TextBlock>

                    <Separator Grid.Column="2" Margin="9,0" />
                    <TextBlock
                        Grid.Column="3"
                        Margin="0,0,3,0"
                        Text="{Binding ElementName=avEdit, Path=TextArea.OverstrikeMode, Converter={StaticResource OverStrikeModeConverter}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        ToolTip="Determines whether the next typed character is overwritten or inserted" />

                    <Separator Grid.Column="4" Margin="9,0" />
                    <TextBlock
                        Grid.Column="5"
                        Margin="0,0,3,0"
                        DataContext="{Binding DocumentRoot}"
                        Text="{Binding FileEncoding.EncodingName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        ToolTip="{Binding FileEncodingDescription, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />

                </Grid>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
